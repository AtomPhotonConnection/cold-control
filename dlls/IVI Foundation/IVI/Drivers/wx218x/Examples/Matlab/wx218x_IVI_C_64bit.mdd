<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>wx218x</DriverName>
   <DriverType>MATLAB IVI-C</DriverType>
   <InstrumentType>Function Generator</InstrumentType>
   <InstrumentManufacturer>Tabor Electronics Ltd.</InstrumentManufacturer>
   <InstrumentModel>WX218x</InstrumentModel>
   <InstrumentVersion>3.0.2</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>initwithoptions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Vi] = initwithoptions(obj, ResourceName, IdQuery, Reset, OptionsString)

libname = get(obj, 'DriverName');
session = get(obj, 'Interface');
ResourceName = [double(ResourceName) 0];
OptionsString = [double(OptionsString) 0];
Vi = libpointer('uint32Ptr', 0);

status = calllib(libname, 'wx218x_InitWithOptions', ResourceName, IdQuery, Reset, OptionsString, Vi);

Vi = double(Vi.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>action</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Action1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>abortgeneration</Name>
               <Location>action</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function abortgeneration(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_AbortGeneration', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>If the function generator is in the Output Generation State, this function moves the function generator to the Configuration State.  If the function generator is already in the Configuration State, the function does nothing and returns Success.</Description>
            </Method>
            <Method>
               <Name>initiategeneration</Name>
               <Location>action</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiategeneration(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_InitiateGeneration', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>If the function generator is in the Configuration State, this function moves the function generator to the Output Generation State.  If the function generator is already in the Output Generation State, this function does nothing and returns Success.</Description>
            </Method>
            <Method>
               <Name>sendsoftwaretrigger</Name>
               <Location>action</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendsoftwaretrigger(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SendSoftwareTrigger', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sends a software trigger, which will cause the function generator to generate output.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>am</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AM_Enabled</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250401);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250401, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If true, the function generator applies amplitude modulation to the signal that the function generator produces."</Description>
            </Property>
            <Property>
               <Name>AM_Internal_Depth</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250403);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250403 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The extent of modulation the function generator applies to the carrier waveform when the AM Source attribute is set to AM Internal. The unit is percentage. Applies only when the AM Source attribute is set to AM Internal."</Description>
            </Property>
            <Property>
               <Name>AM_Internal_Frequency</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250405);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250405 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The frequency of the internal modulating waveform source. The units are Hertz. Applies only when the AM Source attribute is set to AM Internal."</Description>
            </Property>
            <Property>
               <Name>AM_Internal_Waveform</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250404);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250404 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The waveform of the internal modulating waveform source.  Applies only when the AM Source attribute is set to AM Internal."</Description>
            </Property>
            <Property>
               <Name>AM_Source</Name>
               <Location>am</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250402);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250402 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The source of the signal that the function generator uses as the modulating waveform. Applies only when the AM Enabled attribute is set to True."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arbitrary</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Arbitrary1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Arbitrary_Gain</Name>
               <Location>arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250202);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250202 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The gain of the arbitrary waveform the function generator produces.  This value is unitless."</Description>
            </Property>
            <Property>
               <Name>Arbitrary_Offset</Name>
               <Location>arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250203 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The offset of the arbitrary waveform the function generator produces.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>Arbitrary_Sample_Rate</Name>
               <Location>arbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250204);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250204 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The sample rate of the arbitrary waveforms the function generator produces.  The units are samples per second."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arbitrarysequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitrarySequence1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Arbitrary_Sequence_Handle</Name>
               <Location>arbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250211);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250211 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Identifies which arbitrary sequence the function generator produces. You create arbitrary sequences with the Create Arbitrary Sequence function. This function returns a handle that identifies the particular sequence. To configure the function generator to produce a specific sequence, set this attribute to the sequence's handle."</Description>
            </Property>
            <Property>
               <Name>Number_Sequences_Max</Name>
               <Location>arbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250212);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The maximum number of arbitrary sequences that the function generator allows."</Description>
            </Property>
            <Property>
               <Name>Sequence_Length_Max</Name>
               <Location>arbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250214);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The maximum number of arbitrary waveforms that the function generator allows in an arbitrary sequence."</Description>
            </Property>
            <Property>
               <Name>Sequence_Length_Min</Name>
               <Location>arbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250213);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The minimum number of arbitrary waveforms that the function generator allows in an arbitrary sequence."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arbitrarywaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Arbitrary_Frequency</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250209);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250209 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The rate at which an entire arbitrary waveform is generated.  The units are in Hertz."</Description>
            </Property>
            <Property>
               <Name>Arbitrary_Waveform_Handle</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250201);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250201 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Identifies which arbitrary waveform the function generator produces. You create arbitrary waveforms with the Create Arbitrary Waveform function. This function returns a handle that identifies the particular waveform. To configure the function generator to produce a specific waveform, set this attribute to the waveform's handle."</Description>
            </Property>
            <Property>
               <Name>Waveform_Quantum</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The size of each arbitrary waveform must be a multiple of a quantum value. This attribute returns the quantum value the function generator allows. For example, if this attribute returns a value of 8, all waveform sizes must be a multiple of 8."</Description>
            </Property>
            <Property>
               <Name>Waveform_Size_Max</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250208);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The maximum number of points the function generator allows in an arbitrary waveform."</Description>
            </Property>
            <Property>
               <Name>Waveform_Size_Min</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250207);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The minimum number of points the function generator allows in an arbitrary waveform."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>attributeaccessors</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AttributeAccessors1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getattributeviboolean</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviboolean(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint16Ptr', 0);

status = calllib(libname, 'wx218x_GetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributeviint32</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint32(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_GetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevireal64</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevireal64(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevisession</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevisession(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint32Ptr', 0);

status = calllib(libname, 'wx218x_GetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevistring</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_GetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValueBufferSize, AttributeValue);

AttributeValue = strtrim(char(AttributeValue.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviboolean</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviboolean(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'wx218x_SetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviint32</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint32(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'wx218x_SetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevireal64</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevireal64(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'wx218x_SetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevisession</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevisession(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'wx218x_SetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevistring</Name>
               <Location>attributeaccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = [double(AttributeValue) 0];

status = calllib(libname, 'wx218x_SetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationamplitudemodulation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationAmplitudeModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureamenabled</Name>
               <Location>configurationamplitudemodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureamenabled(obj, ChannelName, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureAMEnabled', session, ChannelName, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures whether the function generator applies amplitude modulation to a channel.</Description>
            </Method>
            <Method>
               <Name>configureaminternal</Name>
               <Location>configurationamplitudemodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaminternal(obj, Depth, Waveform, Frequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureAMInternal', session, Depth, Waveform, Frequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the attributes that control the function generator's internal amplitude modulating waveform source.</Description>
            </Method>
            <Method>
               <Name>configureamsource</Name>
               <Location>configurationamplitudemodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureamsource(obj, ChannelName, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureAMSource', session, ChannelName, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the source of the AM modulating waveform.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationarbitrarysequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationArbitrarySequence1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>cleararbmemory</Name>
               <Location>configurationarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function cleararbmemory(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearArbMemory', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Removes all previously created arbitrary waveforms and sequences from the function generator's memory and invalidates all waveform and sequence handles.</Description>
            </Method>
            <Method>
               <Name>cleararbsequence</Name>
               <Location>configurationarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function cleararbsequence(obj, Handle)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearArbSequence', session, Handle);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Removes a previously created arbitrary sequence from the function generator's memory and invalidates the sequence's handle.</Description>
            </Method>
            <Method>
               <Name>configurearbsequence</Name>
               <Location>configurationarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbsequence(obj, ChannelName, Handle, Gain, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureArbSequence', session, ChannelName, Handle, Gain, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the attributes of the function generator that affect arbitrary sequence generation.</Description>
            </Method>
            <Method>
               <Name>createarbsequence</Name>
               <Location>configurationarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle] = createarbsequence(obj, Length, WfmHandle, LoopCount)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Handle = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateArbSequence', session, Length, WfmHandle, LoopCount, Handle);

Handle = double(Handle.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Creates an arbitrary waveform sequence from an array of waveform handles and a corresponding array of loop counts, and returns a handle that identifies the sequence.  The handle is used by the Configure, and Clear methods.</Description>
            </Method>
            <Method>
               <Name>queryarbseqcapabilities</Name>
               <Location>configurationarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MaxNumSeqs, MinSeqLength, MaxSeqLength, MaxLoopCount] = queryarbseqcapabilities(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MaxNumSeqs = libpointer('int32Ptr', 0);
MinSeqLength = libpointer('int32Ptr', 0);
MaxSeqLength = libpointer('int32Ptr', 0);
MaxLoopCount = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_QueryArbSeqCapabilities', session, MaxNumSeqs, MinSeqLength, MaxSeqLength, MaxLoopCount);

MaxNumSeqs = double(MaxNumSeqs.Value);
MinSeqLength = double(MinSeqLength.Value);
MaxSeqLength = double(MaxSeqLength.Value);
MaxLoopCount = double(MaxLoopCount.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the attributes of the function generator that are related to creating arbitrary sequences. These attributes are the maximum number of sequences, minimum sequence length, maximum sequence length, and maximum loop count.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationarbitrarywaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>cleararbwaveform</Name>
               <Location>configurationarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function cleararbwaveform(obj, Handle)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearArbWaveform', session, Handle);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Removes a previously created arbitrary waveform from the function generator's memory and invalidates the waveform's handle.</Description>
            </Method>
            <Method>
               <Name>configurearbwaveform</Name>
               <Location>configurationarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbwaveform(obj, ChannelName, Handle, Gain, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureArbWaveform', session, ChannelName, Handle, Gain, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the attributes of the function generator that affect arbitrary waveform generation.</Description>
            </Method>
            <Method>
               <Name>configuresamplerate</Name>
               <Location>configurationarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresamplerate(obj, SampleRate)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureSampleRate', session, SampleRate);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the function generator's sample rate.</Description>
            </Method>
            <Method>
               <Name>createarbwaveform</Name>
               <Location>configurationarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle] = createarbwaveform(obj, Size, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Handle = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateArbWaveform', session, Size, Data, Handle);

Handle = double(Handle.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Creates an arbitrary waveform and returns a handle to it. The handle is used by the Configure, Clear, and ArbitrarySequence.Create methods.</Description>
            </Method>
            <Method>
               <Name>queryarbwfmcapabilities</Name>
               <Location>configurationarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MaxNumWfms, WfmQuantum, MinWfmSize, MaxWfmSize] = queryarbwfmcapabilities(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MaxNumWfms = libpointer('int32Ptr', 0);
WfmQuantum = libpointer('int32Ptr', 0);
MinWfmSize = libpointer('int32Ptr', 0);
MaxWfmSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_QueryArbWfmCapabilities', session, MaxNumWfms, WfmQuantum, MinWfmSize, MaxWfmSize);

MaxNumWfms = double(MaxNumWfms.Value);
WfmQuantum = double(WfmQuantum.Value);
MinWfmSize = double(MinWfmSize.Value);
MaxWfmSize = double(MaxWfmSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the attributes of the function generator that are related to creating arbitrary waveforms. These attributes are the maximum number of waveforms, waveform quantum, minimum waveform size, and maximum waveform size.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationarbitrarywaveformarbitrarywaveformfrequency</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationArbitraryWaveformArbitraryWaveformFrequency1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurearbfrequency</Name>
               <Location>configurationarbitrarywaveformarbitrarywaveformfrequency</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbfrequency(obj, ChannelName, Frequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureArbFrequency', session, ChannelName, Frequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the rate at which the function generator produces an entire arbitrary waveform.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationburst</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationBurst1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureburstcount</Name>
               <Location>configurationburst</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureburstcount(obj, ChannelName, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureBurstCount', session, ChannelName, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the burst count attribute.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationfrequencymodulation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFrequencyModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurefmenabled</Name>
               <Location>configurationfrequencymodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefmenabled(obj, ChannelName, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureFMEnabled', session, ChannelName, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures whether the function generator applies frequency modulation to a channel.</Description>
            </Method>
            <Method>
               <Name>configurefminternal</Name>
               <Location>configurationfrequencymodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefminternal(obj, Deviation, Waveform, Frequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureFMInternal', session, Deviation, Waveform, Frequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the attributes that control the function generator's internal frequency modulating waveform source.</Description>
            </Method>
            <Method>
               <Name>configurefmsource</Name>
               <Location>configurationfrequencymodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefmsource(obj, ChannelName, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureFMSource', session, ChannelName, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the source of the FM modulating waveform.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationgeneral</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationGeneral1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureoperationmode</Name>
               <Location>configurationgeneral</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoperationmode(obj, ChannelName, OperationMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureOperationMode', session, ChannelName, OperationMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures how the function generator produces output on a channel.</Description>
            </Method>
            <Method>
               <Name>configureoutputenabled</Name>
               <Location>configurationgeneral</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoutputenabled(obj, ChannelName, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureOutputEnabled', session, ChannelName, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures whether the signal the function generator produces appears at a channel's output connector.</Description>
            </Method>
            <Method>
               <Name>configureoutputimpedance</Name>
               <Location>configurationgeneral</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoutputimpedance(obj, ChannelName, Impedance)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureOutputImpedance', session, ChannelName, Impedance);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the output terminal impedance of one of the function generator's channels.</Description>
            </Method>
            <Method>
               <Name>configureoutputmode</Name>
               <Location>configurationgeneral</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoutputmode(obj, OutputMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureOutputMode', session, OutputMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the output mode of the function generator. The output mode determines how the function generator produces waveforms.</Description>
            </Method>
            <Method>
               <Name>configurerefclocksource</Name>
               <Location>configurationgeneral</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerefclocksource(obj, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureRefClockSource', session, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the source of the function generator's reference clock. The function generator uses the reference clock to derive frequencies and sample rates when generating output.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationstandardwaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationStandardWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurestandardwaveform</Name>
               <Location>configurationstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurestandardwaveform(obj, ChannelName, Waveform, Amplitude, DCOffset, Frequency, StartPhase)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureStandardWaveform', session, ChannelName, Waveform, Amplitude, DCOffset, Frequency, StartPhase);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the function generator attributes that affect standard waveform generation.  When the Waveform parameter is set to Waveform DC, this function ignores the Amplitude, Frequency, and Start Phase parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationtrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuretriggersource</Name>
               <Location>configurationtrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggersource(obj, ChannelName, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'wx218x_ConfigureTriggerSource', session, ChannelName, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the function generator's trigger source attribute.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>configurationtriggerinternaltrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTriggerInternalTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureinternaltriggerrate</Name>
               <Location>configurationtriggerinternaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinternaltriggerrate(obj, Rate)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureInternalTriggerRate', session, Rate);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the function generator's internal trigger rate.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>fm</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>FM_Enabled</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250501);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250501, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If true, the function generator applies amplitude modulation to the carrier waveform."</Description>
            </Property>
            <Property>
               <Name>FM_Internal_Depth</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250503);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250503 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The maximum frequency deviation the function generator applies to the carrier waveform when the FM Source attribute is set to FM Internal. Applies only when the FM Source attribute is set to FM Internal."</Description>
            </Property>
            <Property>
               <Name>FM_Internal_Frequency</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250505);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250505 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The frequency of the internal modulating waveform source.  The units are hertz. Applies only when the FM Source attribute is set to FM Internal."</Description>
            </Property>
            <Property>
               <Name>FM_Internal_Waveform</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250504);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250504 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>4.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The waveform of the internal modulating waveform source. Applies only when the FM Source attribute is set to FM Internal."</Description>
            </Property>
            <Property>
               <Name>FM_Source</Name>
               <Location>fm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250502);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250502 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The source of the signal that the function generator uses as the modulating waveform. Applies only when the FM Enabled attribute is set to True."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>inherentiviattributesadvancedsessioninformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesAdvancedSessionInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Driver_Setup</Name>
               <Location>inherentiviattributesadvancedsessioninformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized."</Description>
            </Property>
            <Property>
               <Name>I_O_Resource_Descriptor</Name>
               <Location>inherentiviattributesadvancedsessioninformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized."</Description>
            </Property>
            <Property>
               <Name>Logical_Name</Name>
               <Location>inherentiviattributesadvancedsessioninformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>inherentiviattributesdrivercapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Class_Group_Capabilities</Name>
               <Location>inherentiviattributesdrivercapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050401, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string."</Description>
            </Property>
            <Property>
               <Name>Supported_Instrument_Models</Name>
               <Location>inherentiviattributesdrivercapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050327, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A comma-separated list of instrument models that the IVI specific driver can control.  The string does not include an abbreviation for the manufacturer if it is the same for all models."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>inherentiviattributesdriveridentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Specific_Driver_Class_Spec_Major_Version</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050515);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the major version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Class_Spec_Minor_Version</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050516);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the minor version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Description</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050514, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns a brief description of the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Prefix</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the case-sensitive prefix of the user-callable functions that the IVI-C specific driver exports. The string that this attribute returns contains a maximum of 32 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Revision</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050551, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns version information about the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Vendor</Name>
               <Location>inherentiviattributesdriveridentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050513, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the name of the vendor that supplies the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>inherentiviattributesinstrumentidentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesInstrumentIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Instrument_Firmware_Revision</Name>
               <Location>inherentiviattributesinstrumentidentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050510, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition."</Description>
            </Property>
            <Property>
               <Name>Instrument_Manufacturer</Name>
               <Location>inherentiviattributesinstrumentidentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050511, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes"</Description>
            </Property>
            <Property>
               <Name>Instrument_Model</Name>
               <Location>inherentiviattributesinstrumentidentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050512, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>inherentiviattributesuseroptions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesUserOptions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Drivers may choose to always cache some instrument settings, never cache others, and optionally cache others, to avoid unecessary I/O to the instrument.  If True, the driver caches optionally cached instrument settings."</Description>
            </Property>
            <Property>
               <Name>Interchange_Check</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050021, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error."</Description>
            </Property>
            <Property>
               <Name>Query_Instrument_Status</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument."</Description>
            </Property>
            <Property>
               <Name>Range_Check</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050002, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Drivers may choose to always validate some property/parameter values, never validate others, and optionally validate others, to avoid sending invalid commands to the instrument.  If True, the driver performs optional validations."</Description>
            </Property>
            <Property>
               <Name>Record_Value_Coercions</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error."</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>inherentiviattributesuseroptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>instrumentspecific</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecific1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Active_Channel</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150005, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150005 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the active channel for programming."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>abortgeneration2</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function abortgeneration2(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_AbortGeneration2', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method for an immediate and unconditional termination of the output waveform.</Description>
            </Method>
            <Method>
               <Name>initiategeneration2</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiategeneration2(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_InitiateGeneration2', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method for an immediate and unconditional generation of the selected output waveform.</Description>
            </Method>
            <Method>
               <Name>readquery</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ReadBuff] = readquery(obj, SendBuffBufferSize, SendBuff, ReadBuffBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SendBuff = [double(SendBuff) 0];
ReadBuff = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_ReadQuery', session, SendBuffBufferSize, SendBuff, ReadBuffBufferSize, ReadBuff);

ReadBuff = strtrim(char(ReadBuff.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sending scipi command to the instrument and read the answer.</Description>
            </Method>
            <Method>
               <Name>sendcmd</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendcmd(obj, CommandBufferSize, Command)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Command = [double(Command) 0];

status = calllib(libname, 'wx218x_SendCmd', session, CommandBufferSize, Command);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sending scipi command to the instrument.</Description>
            </Method>
            <Method>
               <Name>setactivechannel</Name>
               <Location>instrumentspecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setactivechannel(obj, ChNameBufferSize, ChName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChName = [double(ChName) 0];

status = calllib(libname, 'wx218x_SetActiveChannel', session, ChNameBufferSize, ChName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the active channel for programming.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificahop</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificAHOP1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureahopdwellmode</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureahopdwellmode(obj, Channel, DwellMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAHOPDwellMode', session, Channel, DwellMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures Dwell mode for AHOP modulation(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureahopenabled</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureahopenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAHOPEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies AHOP modulation to a channel(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureahopmarker</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureahopmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAHOPMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker for AHOP modulation(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureahoptime</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureahoptime(obj, Channel, Time)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAHOPTime', session, Channel, Time);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Time for AHOP modulation(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>createahopfixeddata</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createahopfixeddata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateAHOPFixedData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified AHOP Fixed data array(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>createahopvariabledata</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createahopvariabledata(obj, Channel, AmplDataBufferSize, AmplData, DwellTimeDataBufferSize, DwellTimeData)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateAHOPVariableData', session, Channel, AmplDataBufferSize, AmplData, DwellTimeDataBufferSize, DwellTimeData);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified Amplitude data array and Dwell time data array(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>loadahopfixdatafile</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadahopfixdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadAHOPFixDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified AHOP fixed data file.Minimum file length:2,maximum file length:10000(not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>loadahopvardatafile</Name>
               <Location>instrumentspecificahop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadahopvardatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadAHOPVarDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified AHOP fixed data file.Minimum file length:2*2,maximum file length:10000*2(not for WX2181,WX2182).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificam</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificAM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Internal_Depth</Name>
               <Location>instrumentspecificam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the depth of the modulating waveform in units of percent."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configureamenabled2</Name>
               <Location>instrumentspecificam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureamenabled2(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAMEnabled2', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies amplitude modulation to a channel.</Description>
            </Method>
            <Method>
               <Name>configureinternalam</Name>
               <Location>instrumentspecificam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinternalam(obj, Depth, Waveform, Frequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureInternalAM', session, Depth, Waveform, Frequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the AM parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificarbitrary</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificArbitrary1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Clock_Divider</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150032);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150032 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Will set the external sample clock frequency divider."</Description>
            </Property>
            <Property>
               <Name>Freq_Rast_Divider</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150202);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150202 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150033);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150033 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the factor by which the function generator scales the arbitrary waveforms."</Description>
            </Property>
            <Property>
               <Name>Sample_Rate</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150035);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150035 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Will set the sample clock frequency of the arbitrary and sequenced waveform in units of Sa/s."</Description>
            </Property>
            <Property>
               <Name>Sample_Rate_Source</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150036);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150036 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects the internal or external sample clock input."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clearmemory</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearmemory(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearMemory', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method will delete all predefined segments and will clear the entire waveform memory space for the active channel.</Description>
            </Method>
            <Method>
               <Name>configurearbgain</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbgain(obj, Channel, Gain)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbGain', session, Channel, Gain);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Specifies the factor by which the function generator scales the arbitrary waveforms.</Description>
            </Method>
            <Method>
               <Name>configurearboffset</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearboffset(obj, Channel, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbOffset', session, Channel, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Specifies the value the function generator adds to the arbitrary waveforms.</Description>
            </Method>
            <Method>
               <Name>configurearbsamplerate</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbsamplerate(obj, SampleRate)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureArbSampleRate', session, SampleRate);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Will set the sample clock frequency of the arbitrary and sequenced waveform in units of Sa/s.</Description>
            </Method>
            <Method>
               <Name>configurearbsource</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbsource(obj, Channel, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbSource', session, Channel, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the source of the segment select command.</Description>
            </Method>
            <Method>
               <Name>configurearbtiming</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbtiming(obj, Channel, Timing)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbTiming', session, Channel, Timing);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the timing characteristics of the trace select command.</Description>
            </Method>
            <Method>
               <Name>configureclockdivider</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureclockdivider(obj, Channel, ClockDivider)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureClockDivider', session, Channel, ClockDivider);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Will set the external sample clock frequency divider (not for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configurefreqrastdivider</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefreqrastdivider(obj, Channel, Divider)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFreqRastDivider', session, Channel, Divider);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure Frequency Raster Divider (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configuresampleratesource</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresampleratesource(obj, Channel, SampleRateSource)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSampleRateSource', session, Channel, SampleRateSource);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects the internal or external sample clock input.</Description>
            </Method>
            <Method>
               <Name>setsampleratemax</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setsampleratemax(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SetSampleRateMax', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the maximum sample clock frequency of the arbitrary waveform in units of samples per second (Sa/s).</Description>
            </Method>
            <Method>
               <Name>setsampleratemin</Name>
               <Location>instrumentspecificarbitrary</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setsampleratemin(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SetSampleRateMin', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the minimum sample clock frequency of the arbitrary waveform in units of samples per second (Sa/s).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificarbitrarysequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificArbitrarySequence1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Advance_Mode</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150043);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150043 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects the sequence advance mode."</Description>
            </Property>
            <Property>
               <Name>Jump_Event</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150044);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150044 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the source of the jump signal."</Description>
            </Property>
            <Property>
               <Name>Length_Max</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150045);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum number of arbitrary waveforms the function generator allows in a sequence."</Description>
            </Property>
            <Property>
               <Name>Length_Min</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150046);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the minimum number of arbitrary waveforms the function generator allows in a sequence."</Description>
            </Property>
            <Property>
               <Name>Loop_Count_Max</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150047);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum number of times the function generator can repeat an arbitrary waveform in a sequence."</Description>
            </Property>
            <Property>
               <Name>Number_Sequence_Max</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150048);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum number of loops that the advanced sequence can execute when its advance mode is programmed to ONCE."</Description>
            </Property>
            <Property>
               <Name>Prestep</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150125);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150125 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets Sequence Prestep as Wave or DC."</Description>
            </Property>
            <Property>
               <Name>Quick_Sequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150119);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150119 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If user want to download sequence table in quick mode, he must set this proprty to 1, else to 0."</Description>
            </Property>
            <Property>
               <Name>Timing</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150051);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150051 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the timing characteristics of the sequence select command."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>cleararbitrarysequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function cleararbitrarysequence(obj, Handle)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearArbitrarySequence', session, Handle);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to delete specified sequence or to delete all sequences and to free space for fresh sequence tables (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureadvancemode</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureadvancemode(obj, Channel, AdvanceMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureAdvanceMode', session, Channel, AdvanceMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects the sequence advance mode (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configurearbitrarysequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbitrarysequence(obj, Channel, Handle, Gain, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbitrarySequence', session, Channel, Handle, Gain, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the parameters of the function generator that affect arbitrary sequence generation (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureoncecount</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoncecount(obj, Channel, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureOnceCount', session, Channel, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets sequence once count (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureseqjumpevent</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureseqjumpevent(obj, Channel, JumpEvent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSeqJumpEvent', session, Channel, JumpEvent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure  the source of the jump signal (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureseqprestep</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureseqprestep(obj, Channel, Prestep)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSeqPrestep', session, Channel, Prestep);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Sequence Prestep as Wave or DC (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureseqsource</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureseqsource(obj, Channel, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSeqSource', session, Channel, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure the source of the sequence (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureseqsynclock</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureseqsynclock(obj, Channel, SyncLock)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSeqSyncLock', session, Channel, SyncLock);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Set sync position to sequence step number (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>configureseqtiming</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureseqtiming(obj, Channel, Timing)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSeqTiming', session, Channel, Timing);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure the timing characteristics of the sequence select command (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>createarbitrarysequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = createarbitrarysequence(obj, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateArbitrarySequence', session, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an arbitrary sequence from an array of waveform handles and an array of corresponding loop counts (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>createsequenceadv</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = createsequenceadv(obj, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
JumpFlag = [double(JumpFlag) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateSequenceAdv', session, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an arbitrary sequence from an array of waveform handles, array of corresponding loop counts and array of JumpFlag (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>createsequenceadv1</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = createsequenceadv1(obj, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateSequenceAdv1', session, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an arbitrary sequence from an array of waveform handles, array of corresponding loop counts and array of JumpFlag (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>setactivesequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setactivesequence(obj, Channel, SeqNum)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetActiveSequence', session, Channel, SeqNum);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets active sequence for selected Channel (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>setcoupleactivesequence</Name>
               <Location>instrumentspecificarbitrarysequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setcoupleactivesequence(obj, SeqNum1, SeqNum2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SetCoupleActiveSequence', session, SeqNum1, SeqNum2);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the selected seq numbers for the two part simultaneously (only for 4Ch. models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificarbitrarysequenceadvancesequence</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificArbitrarySequenceAdvanceSequence1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Once_Count</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150210);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150210 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets or query advance sequence once count."</Description>
            </Property>
            <Property>
               <Name>Sync_Lock</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150053);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150053 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Set sync position to advance sequence step number"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configureoncecount2</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoncecount2(obj, Channel, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureOnceCount2', session, Channel, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets advance sequence once count (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>createadvsequence</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createadvsequence(obj, SeqHandleBufferSize, SeqHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
JumpFlag = [double(JumpFlag) 0];

status = calllib(libname, 'wx218x_CreateAdvSequence', session, SeqHandleBufferSize, SeqHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Creates an advanced sequence table (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>createadvsequence1</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createadvsequence1(obj, SeqHandleBufferSize, SeqHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_CreateAdvSequence1', session, SeqHandleBufferSize, SeqHandle, LoopCountBufferSize, LoopCount, JumpFlagBufferSize, JumpFlag);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Creates an advanced sequence table (not for WS8351,WS8352).</Description>
            </Method>
            <Method>
               <Name>deleteadvsequence</Name>
               <Location>instrumentspecificarbitrarysequenceadvancesequence</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function deleteadvsequence(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_DeleteAdvSequence', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to delete and reset the contents of the advanced sequencing table (not for WS8351,WS8352).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificarbitrarywaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Download_Record</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150207);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150207 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Enable or Disable record all downloaded waves on internal flash."</Description>
            </Property>
            <Property>
               <Name>Fast_Download</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150205);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150205 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Number_Waveforms_Max</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150039);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum number of arbitrary waveforms that the function generator allows."</Description>
            </Property>
            <Property>
               <Name>Quantum</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150040);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The size (i.e. number of points) of each waveform must be a multiple of a constant quantum value."</Description>
            </Property>
            <Property>
               <Name>Size_Max</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150041);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum number of points the function generator allows in a waveform."</Description>
            </Property>
            <Property>
               <Name>Size_Min</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150042);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the minimum number of points the function generator allows in a waveform."</Description>
            </Property>
            <Property>
               <Name>Trace_Mode</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150200);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150200 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the trace mode."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>cleararbitrarywaveform</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function cleararbitrarywaveform(obj, Handle)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearArbitraryWaveform', session, Handle);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method will delete a predefined segment from the working memory or all predefined segments and will clear the entire waveform memory space.</Description>
            </Method>
            <Method>
               <Name>configurearbitrarywaveform</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbitrarywaveform(obj, Channel, Handle, Gain, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureArbitraryWaveform', session, Channel, Handle, Gain, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the parameters of the function generator that affect arbitrary waveform generation.</Description>
            </Method>
            <Method>
               <Name>configurearbwavetracemode</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurearbwavetracemode(obj, TraceMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureArbWaveTraceMode', session, TraceMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure the trace mode (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configuredownloadrecord</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredownloadrecord(obj, DownloadRecord)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureDownloadRecord', session, DownloadRecord);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Enable or Disable record all downloaded waves on internal flash (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>createarbitrarywaveform</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = createarbitrarywaveform(obj, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateArbitraryWaveform', session, DataBufferSize, Data, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an arbitrary waveform from array of Data values.</Description>
            </Method>
            <Method>
               <Name>createarbitrarywaveformcustom</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = createarbitrarywaveformcustom(obj, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateArbitraryWaveformCustom', session, DataBufferSize, Data, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an arbitrary waveform from array of Data (short) values,that are already in range from 0 to 4095 (WX2181, WX2182) and from 0 to 16383 (WX2181B, WX2182B,WX2182C,WX1281B,WX1282B,WS8351,WS8352,WX2184,WX1284,WX2184C,WX1284C).</Description>
            </Method>
            <Method>
               <Name>createcustomadv</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle1, Handle2] = createcustomadv(obj, Data1BufferSize, Data1, Data2BufferSize, Data2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Handle1 = libpointer('int32Ptr', 0);
Handle2 = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_CreateCustomAdv', session, Data1BufferSize, Data1, Data2BufferSize, Data2, Handle1, Handle2);

Handle1 = double(Handle1.Value);
Handle2 = double(Handle2.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method download an arbitrary waveform from arrays of Data (short) values,that are already in range from  0 to 16383 in to the both channels(Channel1 and Channel2,Channel3 and Channel4) when trace mode is Double or Combine (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>loadarbwfmfromfile</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = loadarbwfmfromfile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadArbWfmFromFile', session, Channel, FileNameBufferSize, FileName, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method load waveform from file and create an arbitrary waveform.</Description>
            </Method>
            <Method>
               <Name>loadarbwfmfromfileadv</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle1, Handle2] = loadarbwfmfromfileadv(obj, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName1 = [double(FileName1) 0];
FileName2 = [double(FileName2) 0];
Handle1 = libpointer('int32Ptr', 0);
Handle2 = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadArbWfmFromFileAdv', session, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2, Handle1, Handle2);

Handle1 = double(Handle1.Value);
Handle2 = double(Handle2.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates two arbitrary waveforms from specified files and download them in to the memory when trace mode Combine (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>loadasciiarbwfmfromfile</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = loadasciiarbwfmfromfile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadAsciiArbWfmFromFile', session, Channel, FileNameBufferSize, FileName, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method load ascii waveform from file and create an arbitrary waveform.</Description>
            </Method>
            <Method>
               <Name>loadasciiarbwfmfromfileadv</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle1, Handle2] = loadasciiarbwfmfromfileadv(obj, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName1 = [double(FileName1) 0];
FileName2 = [double(FileName2) 0];
Handle1 = libpointer('int32Ptr', 0);
Handle2 = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadAsciiArbWfmFromFileAdv', session, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2, Handle1, Handle2);

Handle1 = double(Handle1.Value);
Handle2 = double(Handle2.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates two arbitrary waveforms from specified ascii files and download them in to the memory when trace mode is Combine (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>loadbinaryarbwfmfromfile</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = loadbinaryarbwfmfromfile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadBinaryArbWfmFromFile', session, Channel, FileNameBufferSize, FileName, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method load from binary file and create an arbitrary waveform.</Description>
            </Method>
            <Method>
               <Name>loadbinaryarbwfmfromfileadv</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle1, Handle2] = loadbinaryarbwfmfromfileadv(obj, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName1 = [double(FileName1) 0];
FileName2 = [double(FileName2) 0];
Handle1 = libpointer('int32Ptr', 0);
Handle2 = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadBinaryArbWfmFromFileAdv', session, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2, Handle1, Handle2);

Handle1 = double(Handle1.Value);
Handle2 = double(Handle2.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates two binary arbitrary waveforms from specified files and download them in to the memory when trace mode is Combine (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>loadcsvfile</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = loadcsvfile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadCSVFile', session, Channel, FileNameBufferSize, FileName, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method load csv waveform from file and create an arbitrary waveform.</Description>
            </Method>
            <Method>
               <Name>loadcsvfileadv</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Handle1, Handle2] = loadcsvfileadv(obj, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName1 = [double(FileName1) 0];
FileName2 = [double(FileName2) 0];
Handle1 = libpointer('int32Ptr', 0);
Handle2 = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_LoadCSVFileAdv', session, Channel, FileName1BufferSize, FileName1, FileName2BufferSize, FileName2, Handle1, Handle2);

Handle1 = double(Handle1.Value);
Handle2 = double(Handle2.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates two arbitrary waveforms from specified ascii files and download them in to the memory when trace mode is Combine (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>setactivesegment</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setactivesegment(obj, Channel, SegNum)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetActiveSegment', session, Channel, SegNum);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets active segment for selected Channel.</Description>
            </Method>
            <Method>
               <Name>setcoupleactivesegment</Name>
               <Location>instrumentspecificarbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setcoupleactivesegment(obj, SegNum1, SegNum2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SetCoupleActiveSegment', session, SegNum1, SegNum2);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the selected segments for the two part simultaneously (only for 4Ch. models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificask</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificASK1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Shift_Amplitude</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150150);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150150 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets shift amplitude for ASK modulation."</Description>
            </Property>
            <Property>
               <Name>Start_Amplitude</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150149);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150149 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets start amplitude for ASK modulation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configureaskbaud</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaskbaud(obj, Channel, Baud)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureASKBaud', session, Channel, Baud);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets baud for ASK modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureaskenabled</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaskenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureASKEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies ASK modulation to a channel (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureaskmarker</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaskmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureASKMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker for ASK modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureaskshiftamplitude</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaskshiftamplitude(obj, Channel, ShiftAmpl)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureASKShiftAmplitude', session, Channel, ShiftAmpl);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets shift amplitude for ASK modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configureaskstartamplitude</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaskstartamplitude(obj, Channel, StartAmpl)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureASKStartAmplitude', session, Channel, StartAmpl);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets start amplitude for ASK modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>createaskdata</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createaskdata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Data = [double(Data) 0];

status = calllib(libname, 'wx218x_CreateASKData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads ASK data array in to the instrument (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>createaskdataadv</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createaskdataadv(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateASKDataAdv', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads ASK data array in to the instrument (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>loadaskdatafile</Name>
               <Location>instrumentspecificask</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadaskdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadASKDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified ASK data file (not for WX2181,WX2182).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificcarriermodulation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificCarrierModulation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurecarrfreq</Name>
               <Location>instrumentspecificcarriermodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecarrfreq(obj, Channel, Freq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureCarrFreq', session, Channel, Freq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the CW frequency.</Description>
            </Method>
            <Method>
               <Name>configurecarrwaveform</Name>
               <Location>instrumentspecificcarriermodulation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecarrwaveform(obj, Channel, Waveform)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureCarrWaveform', session, Channel, Waveform);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Specifies the carrier function. There are three functions that could be modulated: Sine, Triangle and Square.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificchirp</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificCHIRP1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Ampl_Depth</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150140);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150140 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the amplitude depth for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Ampl_Direction</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150143);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150143 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets amplitude direction up or down for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Ampl_Spacing</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150144);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150144 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets chirp amplitude spacing linear or logarithmic."</Description>
            </Property>
            <Property>
               <Name>Freq_Direction</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150141);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150141 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets frequency direction up or down for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Freq_Spacing</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150142);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150142 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets frequency spacing linear or logarithmic for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Marker_Frequency</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150139);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150139 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the marker frequency for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Repetition</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150136);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150136 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the repetition for chirp modulation"</Description>
            </Property>
            <Property>
               <Name>Start_Frequency</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150137);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150137 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the start frequency for chirp modulation."</Description>
            </Property>
            <Property>
               <Name>Stop_Frequency</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150138);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150138 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the stop frequency for Chirp modulation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurechirpampldepth</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpampldepth(obj, Channel, AmplDepth)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpAmplDepth', session, Channel, AmplDepth);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the amplitude depth for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpampldirection</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpampldirection(obj, Channel, AmplDirection)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpAmplDirection', session, Channel, AmplDirection);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets amplitude direction up or down for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpamplspacing</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpamplspacing(obj, Channel, AmplSpacing)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpAmplSpacing', session, Channel, AmplSpacing);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets chirp amplitude spacing linear or logarithmic (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpenabled</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies chirp modulation to a channel (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpfreqdirection</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpfreqdirection(obj, Channel, FreqDirection)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpFreqDirection', session, Channel, FreqDirection);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures frequency direction up or down for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpfreqspacing</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpfreqspacing(obj, Channel, FreqSpacing)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpFreqSpacing', session, Channel, FreqSpacing);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets frequency spacing linear or logarithmic for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpmarkerfreq</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpmarkerfreq(obj, Channel, MarkerFreq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpMarkerFreq', session, Channel, MarkerFreq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the marker frequency for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirprepetition</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirprepetition(obj, Channel, Repetition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpRepetition', session, Channel, Repetition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the repetition for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpstartfreq</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpstartfreq(obj, Channel, StartFreq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpStartFreq', session, Channel, StartFreq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the start frequency for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpstopfreq</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpstopfreq(obj, Channel, StopFreq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpStopFreq', session, Channel, StopFreq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the stop frequency for Chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
            <Method>
               <Name>configurechirpwidth</Name>
               <Location>instrumentspecificchirp</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechirpwidth(obj, Channel, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureChirpWidth', session, Channel, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the width for chirp modulation (not for WX2181,WX2182).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificcouple</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificCouple1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Skew</Name>
               <Location>instrumentspecificcouple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150058);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150058 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"When couple state is ALL, this property sets or queries the skew between the start phase of the master channel and the start phase of the slave channel."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurecoupleenabled</Name>
               <Location>instrumentspecificcouple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecoupleenabled(obj, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureCoupleEnabled', session, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets  the couple state of the synchronized channels. Use this method to cause all, or just listed channels to synchronize.</Description>
            </Method>
            <Method>
               <Name>configurecoupleoffset</Name>
               <Location>instrumentspecificcouple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecoupleoffset(obj, Channel, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureCoupleOffset', session, Channel, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>When couple state is ON, this method sets  the offset between the start phase of the master channel and the start phase of the slave channel.</Description>
            </Method>
            <Method>
               <Name>configurecoupleskew</Name>
               <Location>instrumentspecificcouple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecoupleskew(obj, Skew)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureCoupleSkew', session, Skew);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>When couple state is ALL, this method sets the skew between the start phase of the master channel and the start phase of the slave channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificdigitalpatternoutput</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificDigitalPatternOutput1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Arb_Resolution</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150191);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150191 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property duplicates or not duplicates any arbitrary wave for sync between Arb and Dig frequency."</Description>
            </Property>
            <Property>
               <Name>Delay_Mode</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150129);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150129 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs delay mode for digital pattern output."</Description>
            </Property>
            <Property>
               <Name>Dig_Clock</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150204);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150204 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs clock for digital pattern output."</Description>
            </Property>
            <Property>
               <Name>Dig_Port</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150206 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs digital port for digital pattern output."</Description>
            </Property>
            <Property>
               <Name>DigPatternEnabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150132);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150132, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property sets the digital pattern output on or off."</Description>
            </Property>
            <Property>
               <Name>Emphasis_Enabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150189);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150189, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property toggles emphasis on/off."</Description>
            </Property>
            <Property>
               <Name>Format_Data</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150190);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150190 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs how the waveform will be download into the memories."</Description>
            </Property>
            <Property>
               <Name>Level_Mode</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150130);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150130 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs level mode for digital pattern output."</Description>
            </Property>
            <Property>
               <Name>Pod_Present</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150188);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Checks whether a POD is present at the port."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuredigclock</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigclock(obj, DigClock)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureDigClock', session, DigClock);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs clock for digital pattern output (for 4Ch. models, WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattarbresolution</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattarbresolution(obj, Channel, ArbResolution)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattArbResolution', session, Channel, ArbResolution);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method duplicates or not duplicates any arbitrary wave for sync between Arb and Dig frequency (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattbitdelay</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattbitdelay(obj, Channel, BitIndex, BitDelay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattBitDelay', session, Channel, BitIndex, BitDelay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern delay for specified bit index (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattbitenabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattbitenabled(obj, Channel, BitIndex, BitEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattBitEnabled', session, Channel, BitIndex, BitEnabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This merhod sets the digital pattern output on or off for specified bit index (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattbithighlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattbithighlevel(obj, Channel, BitIndex, BitHighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattBitHighLevel', session, Channel, BitIndex, BitHighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern high level for specified bit index (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattbitlowlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattbitlowlevel(obj, Channel, BitIndex, BitLowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattBitLowLevel', session, Channel, BitIndex, BitLowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern low level for specified bit index (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattdelay</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattdelay(obj, Channel, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattDelay', session, Channel, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern delay (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattdelaymode</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattdelaymode(obj, Channel, DelayMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattDelayMode', session, Channel, DelayMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs delay mode for digital pattern output (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattdigport</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattdigport(obj, DigPort)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureDigPattDigPort', session, DigPort);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs digital port for digital pattern output (for 4Ch. models, WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattemphasisenabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattemphasisenabled(obj, Channel, EmphasisEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattEmphasisEnabled', session, Channel, EmphasisEnabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method toggles emphasis on/off (for WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuredigpattenabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the digital pattern output on or off (for 4Ch. models, WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuredigpattformatdata</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattformatdata(obj, Channel, FormatData)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattFormatData', session, Channel, FormatData);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs how the waveform will be download into the memories (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpatthighlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpatthighlevel(obj, Channel, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattHighLevel', session, Channel, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern high level (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattlevelmode</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattlevelmode(obj, Channel, LevelMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattLevelMode', session, Channel, LevelMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs level mode for digital pattern output (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>configuredigpattlowlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpattlowlevel(obj, Channel, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPattLowLevel', session, Channel, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the digital pattern low level (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>createdigpatterndata</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createdigpatterndata(obj, Channel, DataBufferSize, Data, Segment)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateDigPatternData', session, Channel, DataBufferSize, Data, Segment);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method creates an digital pattern waveform from array of Data values (for WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>createdigpatternparamdata</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createdigpatternparamdata(obj, Channel, StateBufferSize, State, DelayBufferSize, Delay, HighLevelBufferSize, HighLevel, LowLevelBufferSize, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
State = [double(State) 0];

status = calllib(libname, 'wx218x_CreateDigPatternParamData', session, Channel, StateBufferSize, State, DelayBufferSize, Delay, HighLevelBufferSize, HighLevel, LowLevelBufferSize, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads digital pattern parameters data in to the instrument (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>createdigpatternparamdata1</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createdigpatternparamdata1(obj, Channel, StateBufferSize, State, DelayBufferSize, Delay, HighLevelBufferSize, HighLevel, LowLevelBufferSize, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateDigPatternParamData1', session, Channel, StateBufferSize, State, DelayBufferSize, Delay, HighLevelBufferSize, HighLevel, LowLevelBufferSize, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads digital pattern parameters data in to the instrument (for 4Ch. models,WX218xB-D,WX128xB-D,WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>getdigpatternbitdelay</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Delay] = getdigpatternbitdelay(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Delay = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetDigPatternBitDelay', session, Channel, Index, Delay);

Delay = double(Delay.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern delay for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>getdigpatternbitenabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Enabled] = getdigpatternbitenabled(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Enabled = libpointer('uint16Ptr', 0);

status = calllib(libname, 'wx218x_GetDigPatternBitEnabled', session, Channel, Index, Enabled);

Enabled = double(Enabled.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property sets the digital pattern output on or off for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>getdigpatternbithighlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [HighLevel] = getdigpatternbithighlevel(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
HighLevel = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetDigPatternBitHighLevel', session, Channel, Index, HighLevel);

HighLevel = double(HighLevel.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern high level for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>getdigpatternbitlowlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowLevel] = getdigpatternbitlowlevel(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
LowLevel = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetDigPatternBitLowLevel', session, Channel, Index, LowLevel);

LowLevel = double(LowLevel.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern low level for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>loaddigitaldataasciifile</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loaddigitaldataasciifile(obj, FileNameBufferSize, FileName, Segment)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadDigitalDataAsciiFile', session, FileNameBufferSize, FileName, Segment);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Load Ascii Digital Data from file to the instrument.Every point is of type unsigned int in format hexa (for 4Ch. models, WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>loaddigitaldatabinaryfile</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loaddigitaldatabinaryfile(obj, FileNameBufferSize, FileName, Segment)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadDigitalDataBinaryFile', session, FileNameBufferSize, FileName, Segment);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Load Binary Digital Data from file to the instrument.Every point is 4 byte or 2 byte (for 4Ch. models, WX218xC,WX128xC).</Description>
            </Method>
            <Method>
               <Name>loaddigitalpatternfromfile</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loaddigitalpatternfromfile(obj, Channel, FileNameBufferSize, FileName, Segment)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadDigitalPatternFromFile', session, Channel, FileNameBufferSize, FileName, Segment);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads from file and create digital pattern waveform (for WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setdigpatternbitdelay</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpatternbitdelay(obj, Channel, Index, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPatternBitDelay', session, Channel, Index, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern delay for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>setdigpatternbitenabled</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpatternbitenabled(obj, Channel, Index, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPatternBitEnabled', session, Channel, Index, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property sets the digital pattern output on or off for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>setdigpatternbithighlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpatternbithighlevel(obj, Channel, Index, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPatternBitHighLevel', session, Channel, Index, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern high level for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
            <Method>
               <Name>setdigpatternbitlowlevel</Name>
               <Location>instrumentspecificdigitalpatternoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpatternbitlowlevel(obj, Channel, Index, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPatternBitLowLevel', session, Channel, Index, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This property programs the digital pattern low level for specified bit index (not for WS835x,WX218xB,WX128xB,WX218x).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificdigitalpulse</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificDigitalPulse1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Configure</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150092);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150092 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables the programming of pulse parameters in units of time (seconds)or units of percent."</Description>
            </Property>
            <Property>
               <Name>Delay_Percent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150094);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150094 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the delayed interval of which the output idles on the low level until the first transition to high level in units of percent."</Description>
            </Property>
            <Property>
               <Name>Double_Delay</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150095);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150095 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the delay between two adjacent pulses when the double mode is selected in unuts of seconds."</Description>
            </Property>
            <Property>
               <Name>Double_Delay_Percent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150096);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150096 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the delay between two adjacent pulses when the double mode is selected in unuts of percent."</Description>
            </Property>
            <Property>
               <Name>Fall_Time</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150097);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150097 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the interval it will take the trailing edge of the pulse to transition from its high to low level settings in units of seconds."</Description>
            </Property>
            <Property>
               <Name>Fall_Time_Percent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150098);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150098 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the interval it will take the trailing edge of the pulse to transition from its high to low level settings in units of percent."</Description>
            </Property>
            <Property>
               <Name>Level_Control</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150100);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150100 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property will determine how the pulse levels are programed. Pulse level mode options are: High/Low, Amplitude/Offset, Positive and Negative."</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150104);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150104 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the pulse repetition rate (period) in units of seconds."</Description>
            </Property>
            <Property>
               <Name>Polarity</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150105 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the polarity of the pulse in reference to the base line level. The polarity options are: Normal, Inverted and Complemented."</Description>
            </Property>
            <Property>
               <Name>Rise_Time</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150106 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the interval it will take the leading edge of the pulse to transition from its low to high level settings in units of seconds."</Description>
            </Property>
            <Property>
               <Name>Rise_Time_Percent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150107);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150107 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the interval it will take the leading edge of the pulse to transition from its low to high level settings in units of percent."</Description>
            </Property>
            <Property>
               <Name>Transition</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150108);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150108 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This method will place the pulse output in one of three transition options: Fast, Linear or Symmetrical."</Description>
            </Property>
            <Property>
               <Name>Width_Percent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150110);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150110 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the pulse width value in units of percent."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuredigpulseamplitude</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulseamplitude(obj, Channel, Amplitude)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseAmplitude', session, Channel, Amplitude);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the peak to peak amplitude of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsedelay</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsedelay(obj, Channel, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseDelay', session, Channel, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the delayed interval of which the output idles on the low level until the first transition to high level in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsedelaypercent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsedelaypercent(obj, Channel, DelayPercent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseDelayPercent', session, Channel, DelayPercent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the delayed interval of which the output idles on the low level until the first transition to high level in units of percent.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsedoubledelay</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsedoubledelay(obj, Channel, DoubleDelay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseDoubleDelay', session, Channel, DoubleDelay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the delay between two adjacent pulses when the double mode is selected in unuts of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsedoubledelaypercent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsedoubledelaypercent(obj, Channel, DoubleDelayPercent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseDoubleDelayPercent', session, Channel, DoubleDelayPercent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the delay between two adjacent pulses when the double mode is selected in unuts of percent.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsefalltime</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsefalltime(obj, Channel, FallTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseFallTime', session, Channel, FallTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the interval it will take the trailing edge of the pulse to transition from its high to low level settings in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsefalltimepercent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsefalltimepercent(obj, Channel, FallTimePercent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseFallTimePercent', session, Channel, FallTimePercent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the interval it will take the trailing edge of the pulse to transition from its high to low level settings in units of percent.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsehighlevel</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsehighlevel(obj, Channel, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseHighLevel', session, Channel, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the high level amplitude of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>configuredigpulselevelcontrol</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulselevelcontrol(obj, Channel, LevelControl)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseLevelControl', session, Channel, LevelControl);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method will determine how the pulse levels are programed. Pulse level mode options are: High/Low, Amplitude/Offset, Positive and Negative.</Description>
            </Method>
            <Method>
               <Name>configuredigpulselowlevel</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulselowlevel(obj, Channel, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseLowLevel', session, Channel, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the low level amplitude of the pulse waveform.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsemode</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsemode(obj, Channel, Mode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseMode', session, Channel, Mode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the mode of the pulse. Pulse mode options are: Single pulse, Delayed pulse and  Double pulse.</Description>
            </Method>
            <Method>
               <Name>configuredigpulseoffset</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulseoffset(obj, Channel, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseOffset', session, Channel, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the offset amplitude of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>configuredigpulseperiod</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulseperiod(obj, Channel, Period)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulsePeriod', session, Channel, Period);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the pulse repetition rate (period) in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsepolarity</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsepolarity(obj, Channel, Polarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulsePolarity', session, Channel, Polarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the polarity of the pulse in reference to the base line level. The polarity options are: Normal, Inverted and Complemented.</Description>
            </Method>
            <Method>
               <Name>configuredigpulserisetime</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulserisetime(obj, Channel, RiseTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseRiseTime', session, Channel, RiseTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the interval it will take the leading edge of the pulse to transition from its low to high level settings in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsetransition</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsetransition(obj, Channel, Transition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseTransition', session, Channel, Transition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method will place the pulse output in one of three transition options: Fast, Linear or Symmetrical.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsewidth</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsewidth(obj, Channel, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseWidth', session, Channel, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the pulse width value in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuredigpulsewidthpercent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredigpulsewidthpercent(obj, Channel, WidthPercent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDigPulseWidthPercent', session, Channel, WidthPercent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the pulse width value in units of percent.</Description>
            </Method>
            <Method>
               <Name>configurerisetimepercent</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerisetimepercent(obj, Channel, RiseTimePercent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureRiseTimePercent', session, Channel, RiseTimePercent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the interval it will take the leading edge of the pulse to transition from its low to high level settings in units of percent.</Description>
            </Method>
            <Method>
               <Name>setdigpulseamplitudemax</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpulseamplitudemax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPulseAmplitudeMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the maximum amplitude value  of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>setdigpulseamplitudemin</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpulseamplitudemin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPulseAmplitudeMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the minimum amplitude value  of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>setdigpulseoffsetmax</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpulseoffsetmax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPulseOffsetMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the maximum offset value of the pulse waveform in units of volts.</Description>
            </Method>
            <Method>
               <Name>setdigpulseoffsetmin</Name>
               <Location>instrumentspecificdigitalpulse</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdigpulseoffsetmin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDigPulseOffsetMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the minimum offset value of the pulse waveform in units of volts.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificfhop</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificFHOP1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Dwell_Mode</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150155);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150155 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This parameter selects one of the Dwell mode variables for FHOP modulation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurefhopdwellmode</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefhopdwellmode(obj, Channel, DwellMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFHOPDwellMode', session, Channel, DwellMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method selects one of the Dwell mode variables for FHOP modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefhopenabled</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefhopenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFHOPEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies FHOP modulation to a channel (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefhopmarker</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefhopmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFHOPMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker for FHOP modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefhoptime</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefhoptime(obj, Channel, Time)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFHOPTime', session, Channel, Time);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets dwell time for FHOP modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createfhopfixeddata</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createfhopfixeddata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateFHOPFixedData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified Freq Hop Fixed data array (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createfhopvariabledata</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createfhopvariabledata(obj, Channel, FreqDataBufferSize, FreqData, DwellTimeDataBufferSize, DwellTimeData)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateFHOPVariableData', session, Channel, FreqDataBufferSize, FreqData, DwellTimeDataBufferSize, DwellTimeData);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified Freq data array and Dwell time data array (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>loadfhopfixdatafile</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadfhopfixdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadFHOPFixDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified FHOP fixed data file (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>loadfhopvardatafile</Name>
               <Location>instrumentspecificfhop</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadfhopvardatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadFHOPVarDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified FHOP variable data file.Minimum file length:2*2,maximum file length:10000*2 (not for WX218x models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificfm</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificFM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Internal_Deviation</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150060);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150060 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the deviation range around the carrier frequency in units of HZ."</Description>
            </Property>
            <Property>
               <Name>Internal_Frequency</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150061);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150061 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the frequency of the modulating waveform in units of Hz."</Description>
            </Property>
            <Property>
               <Name>Internal_Waveform</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150062);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150062 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This parameter selects one of the waveform shapes as the active modulating waveform."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurefmenabled2</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefmenabled2(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFMEnabled2', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method enables or disables the frequency modulation.</Description>
            </Method>
            <Method>
               <Name>configurefmmarker</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefmmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFMMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs marker frequency position in units of Hz.</Description>
            </Method>
            <Method>
               <Name>configureinternalfm</Name>
               <Location>instrumentspecificfm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinternalfm(obj, Deviation, Waveform, Frequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureInternalFM', session, Deviation, Waveform, Frequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the parameters that control the function generator's internal frequency modulation source.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificfsk</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificFSK1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Shift_Freq</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150146);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150146 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets Shift Frequency for FSK modulation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurefskbaud</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefskbaud(obj, Channel, Baud)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFSKBaud', session, Channel, Baud);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Baud for FSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefskenabled</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefskenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFSKEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies FSK modulation to a channel (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefskmarker</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefskmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFSKMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker for FSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurefskshiftfreq</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurefskshiftfreq(obj, Channel, ShiftFreq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureFSKShiftFreq', session, Channel, ShiftFreq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Shift Frequency for FSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createfskdata</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createfskdata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Data = [double(Data) 0];

status = calllib(libname, 'wx218x_CreateFSKData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads FSK data array in to the instrument (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createfskdataadv</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createfskdataadv(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateFSKDataAdv', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads FSK data array in to the instrument (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>loadfskdatafile</Name>
               <Location>instrumentspecificfsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadfskdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadFSKDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified FSK data file (not for WX218x models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificmarkers</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificMarkers1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Low_Level4_Ch</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150212);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150212 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the low level of the marker output."</Description>
            </Property>
            <Property>
               <Name>Marker_High_Level4_Ch</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150211);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150211 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the high level of the marker output."</Description>
            </Property>
            <Property>
               <Name>Marker_Index</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150195);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150195 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects Marker Index."</Description>
            </Property>
            <Property>
               <Name>Marker_Source</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150196);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150196 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query marker source."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuremarkercontrol</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkercontrol(obj, Channel, Index, Control)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerControl', session, Channel, Index, Control);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set marker control source (not for 4Ch. models, WS835x, WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkerdelay</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerdelay(obj, Channel, Index, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerDelay', session, Channel, Index, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the delay of the marker output (not for WS835x, WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkerenabled</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerenabled(obj, Channel, Index, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerEnabled', session, Channel, Index, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the marker outputs on and off (not for WS835x, WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkerhighlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerhighlevel(obj, Channel, Index, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerHighLevel', session, Channel, Index, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the high level of the marker output (not for 4Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkerhighlevel4ch</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerhighlevel4ch(obj, Channel, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerHighLevel4Ch', session, Channel, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the high level of the marker output for WX2184C, WX1284C models.</Description>
            </Method>
            <Method>
               <Name>configuremarkerindex</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerindex(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerIndex', session, Channel, Index);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects Marker Index(1 or 2) (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configuremarkerlowlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerlowlevel(obj, Channel, Index, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerLowLevel', session, Channel, Index, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the low level of the marker output (not for 4Ch. models, WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkerlowlevel4ch</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerlowlevel4ch(obj, Channel, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerLowLevel4Ch', session, Channel, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the low level of the marker output for WX2184C,WX1284C models.</Description>
            </Method>
            <Method>
               <Name>configuremarkerposition</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerposition(obj, Channel, Index, Position)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerPosition', session, Channel, Index, Position);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker position relative to the waveform start point in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>configuremarkersource</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkersource(obj, Channel, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerSource', session, Channel, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set marker source (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configuremarkerwidth</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuremarkerwidth(obj, Channel, Index, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureMarkerWidth', session, Channel, Index, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker width in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkercontrol</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Control] = getmarkercontrol(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Control = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_GetMarkerControl', session, Channel, Index, Control);

Control = double(Control.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query marker control source (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerdelay</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Delay] = getmarkerdelay(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Delay = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetMarkerDelay', session, Channel, Index, Delay);

Delay = double(Delay.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the delay of the marker output (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerenabled</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Enabled] = getmarkerenabled(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Enabled = libpointer('uint16Ptr', 0);

status = calllib(libname, 'wx218x_GetMarkerEnabled', session, Channel, Index, Enabled);

Enabled = double(Enabled.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the marker outputs on and off (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerhighlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [HighLevel] = getmarkerhighlevel(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
HighLevel = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetMarkerHighLevel', session, Channel, Index, HighLevel);

HighLevel = double(HighLevel.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the high level of the marker output (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerlowlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [LowLevel] = getmarkerlowlevel(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
LowLevel = libpointer('doublePtr', 0);

status = calllib(libname, 'wx218x_GetMarkerLowLevel', session, Channel, Index, LowLevel);

LowLevel = double(LowLevel.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the low level of the marker output (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerposition</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Position] = getmarkerposition(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Position = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_GetMarkerPosition', session, Channel, Index, Position);

Position = double(Position.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker position relative to the waveform start point in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>getmarkerwidth</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Width] = getmarkerwidth(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Width = libpointer('int32Ptr', 0);

status = calllib(libname, 'wx218x_GetMarkerWidth', session, Channel, Index, Width);

Width = double(Width.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker width in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>markerrefresh</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function markerrefresh(obj, Channel, Index)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_MarkerRefresh', session, Channel, Index);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to restore marker local operation (not for 4 Ch. models, WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>markerrefresh2</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function markerrefresh2(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_MarkerRefresh2', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to restore marker local operation (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>setmarkercontrol</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkercontrol(obj, Channel, Index, Control)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerControl', session, Channel, Index, Control);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query marker control source (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerdelay</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerdelay(obj, Channel, Index, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerDelay', session, Channel, Index, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the delay of the marker output (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerenabled</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerenabled(obj, Channel, Index, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerEnabled', session, Channel, Index, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the marker outputs on and off (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerhighlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerhighlevel(obj, Channel, Index, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerHighLevel', session, Channel, Index, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the high level of the marker output (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerlowlevel</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerlowlevel(obj, Channel, Index, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerLowLevel', session, Channel, Index, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this property to set or query the low level of the marker output (not for 4 Ch. models,WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerposition</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerposition(obj, Channel, Index, Position)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerPosition', session, Channel, Index, Position);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker position relative to the waveform start point in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
            <Method>
               <Name>setmarkerwidth</Name>
               <Location>instrumentspecificmarkers</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setmarkerwidth(obj, Channel, Index, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetMarkerWidth', session, Channel, Index, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets marker width in units of waveform points (not for WS835x,WX218xB-D,WX128xB-D).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificoutput</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificOutput1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Couple</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150006 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the type of the output amplifier that will be placed between the DAC and the output connectors. The instrument has three separate amplifiers for the output path: DC, AC and HV."</Description>
            </Property>
            <Property>
               <Name>Ext_Frequency</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150203 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>3.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the external frequency."</Description>
            </Property>
            <Property>
               <Name>Ref_Ext_Frequency</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150011);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150011 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the frequency range that will be applied to the reference oscillator input."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurecoupleallch</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurecoupleallch(obj, Couple)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureCoupleAllCh', session, Couple);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the type of the output amplifier that will be placed between the DAC and the output connectors for all channels (for 4 Ch. models).</Description>
            </Method>
            <Method>
               <Name>configureextfrequency</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureextfrequency(obj, Channel, ExtFrequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureExtFrequency', session, Channel, ExtFrequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the external frequency (for 4 Ch. models).</Description>
            </Method>
            <Method>
               <Name>configureoutputstateallch</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoutputstateallch(obj, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureOutputStateAllCh', session, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the output on and off for all channels (for 4 Ch. models).</Description>
            </Method>
            <Method>
               <Name>configurerefextfrequency</Name>
               <Location>instrumentspecificoutput</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerefextfrequency(obj, Channel, ExtFreq)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureRefExtFrequency', session, Channel, ExtFreq);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the frequency range that will be applied to the reference oscillator input.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificoutputsync</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificOutputSync1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Function</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150013);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150013 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the shape of the sync pulse."</Description>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150014 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the SYNC position in waveform points."</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150016 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the SYNC width in waveform points."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuresyncenabled</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresyncenabled(obj, Channel, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSyncEnabled', session, Channel, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method will set the state of the sync output.</Description>
            </Method>
            <Method>
               <Name>configuresyncfunction</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresyncfunction(obj, Channel, Function)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSyncFunction', session, Channel, Function);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the shape of the sync pulse.</Description>
            </Method>
            <Method>
               <Name>configuresyncposition</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresyncposition(obj, Channel, Position)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSyncPosition', session, Channel, Position);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the SYNC position in waveform points.</Description>
            </Method>
            <Method>
               <Name>configuresyncsource</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresyncsource(obj, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureSyncSource', session, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the source of the sync pulse.</Description>
            </Method>
            <Method>
               <Name>configuresyncwidth</Name>
               <Location>instrumentspecificoutputsync</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresyncwidth(obj, Channel, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSyncWidth', session, Channel, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the SYNC width in waveform points.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificpattern</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificPattern1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High_Level</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150162);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150162 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets High Level for predefined pattern mode."</Description>
            </Property>
            <Property>
               <Name>Length</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150166);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150166 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets length for predefined pattern mode."</Description>
            </Property>
            <Property>
               <Name>Loop</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150164);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150164 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets number of loop for predefined pattern mode."</Description>
            </Property>
            <Property>
               <Name>Low_Level</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150163);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150163 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets Low Level for predefined pattern mode."</Description>
            </Property>
            <Property>
               <Name>Preamble</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150165);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150165 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets preamble for predefined pattern mode."</Description>
            </Property>
            <Property>
               <Name>Predefined_Type</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150161);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150161 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>6.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>6.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects type for predefined pattern mode."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurepatternbaud</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternbaud(obj, Channel, Baud)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternBaud', session, Channel, Baud);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets baud for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternhighlevel</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternhighlevel(obj, Channel, HighLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternHighLevel', session, Channel, HighLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets High Level for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternlength</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternlength(obj, Channel, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternLength', session, Channel, Length);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets length for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternlevel</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternlevel(obj, Channel, Level)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternLevel', session, Channel, Level);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets level for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternloop</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternloop(obj, Channel, Loop)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternLoop', session, Channel, Loop);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets number of loop for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternlowlevel</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternlowlevel(obj, Channel, LowLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternLowLevel', session, Channel, LowLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Low Level for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternmode</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternmode(obj, Channel, Mode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternMode', session, Channel, Mode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects one of the two pattern modes:Composer or Predefined (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternpreamble</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternpreamble(obj, Channel, Preamble)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternPreamble', session, Channel, Preamble);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets preamble for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepatternpredtype</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatternpredtype(obj, Channel, Type)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternPredType', session, Channel, Type);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects type for predefined pattern mode (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createpatterndata</Name>
               <Location>instrumentspecificpattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpatterndata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Data = [double(Data) 0];

status = calllib(libname, 'wx218x_CreatePatternData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads pattern data in to the instrument (not for WX218x models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificpatterncomposer</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificPatternComposer1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Fast_Start</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150197);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150197 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets fast start for pattern composer."</Description>
            </Property>
            <Property>
               <Name>Linear_Start</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150168);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150168 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets linear start for pattern composer."</Description>
            </Property>
            <Property>
               <Name>PattCompResolution</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150192);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150192 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets resolution for pattern composer."</Description>
            </Property>
            <Property>
               <Name>Resolution_Type</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150193);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150193 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets resolution type for pattern composer."</Description>
            </Property>
            <Property>
               <Name>Transition_Type</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150167);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150167 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets transition type for pattern composer."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurepatterncompfaststart</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterncompfaststart(obj, Channel, FastStart)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternCompFastStart', session, Channel, FastStart);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets fast start for pattern composer (not for 4 Ch. models, WX218x).</Description>
            </Method>
            <Method>
               <Name>configurepatterncomplinearstart</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterncomplinearstart(obj, Channel, LinearStart)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternCompLinearStart', session, Channel, LinearStart);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets linear start for pattern composer (not for 4 Ch. models, WX218x).</Description>
            </Method>
            <Method>
               <Name>configurepatterncompresolution</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterncompresolution(obj, Channel, Resolution)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternCompResolution', session, Channel, Resolution);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets resolution for pattern composer.</Description>
            </Method>
            <Method>
               <Name>configurepatterncomprestype</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterncomprestype(obj, Channel, ResType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternCompResType', session, Channel, ResType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets resolution type for pattern composer.</Description>
            </Method>
            <Method>
               <Name>configurepatterncomptranstype</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepatterncomptranstype(obj, Channel, TransitionType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePatternCompTransType', session, Channel, TransitionType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets transition type for pattern composer.</Description>
            </Method>
            <Method>
               <Name>createpatterncomposerfastdata</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpatterncomposerfastdata(obj, Channel, AmplLevelBufferSize, AmplLevel, DwellTimeBufferSize, DwellTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreatePatternComposerFastData', session, Channel, AmplLevelBufferSize, AmplLevel, DwellTimeBufferSize, DwellTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads pattern composer start data in binary format in to the instrument.</Description>
            </Method>
            <Method>
               <Name>createpatterncomposerlineardata</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpatterncomposerlineardata(obj, Channel, AmplLevelBufferSize, AmplLevel, DwellTimeBufferSize, DwellTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreatePatternComposerLinearData', session, Channel, AmplLevelBufferSize, AmplLevel, DwellTimeBufferSize, DwellTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads pattern composer linear data in binary format in to the instrument.</Description>
            </Method>
            <Method>
               <Name>loadpatterncomposerfile</Name>
               <Location>instrumentspecificpatterncomposer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadpatterncomposerfile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadPatternComposerFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads pattern data file in to the instrument.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificpsk</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificPSK1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Rate</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150172);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150172 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets Rate for PSK modulation."</Description>
            </Property>
            <Property>
               <Name>Shift_Phase</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150171);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150171 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets Shift Phase for PSK modulation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurepskbaud</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskbaud(obj, Channel, Baud)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKBaud', session, Channel, Baud);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the baud of which the symbols stream in the (n)PSK data table (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskcarrierstate</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskcarrierstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKCarrierState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the carrier output on and off (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskmarker</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs where on the data stream the instrument will generate a pulse, designated as PSK marker, or index point (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskrate</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskrate(obj, Channel, Rate)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKRate', session, Channel, Rate);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Rate for PSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskshiftphase</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskshiftphase(obj, Channel, ShiftPhase)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKShiftPhase', session, Channel, ShiftPhase);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Shift Phase for PSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskstartphase</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskstartphase(obj, Channel, StartPhase)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKStartPhase', session, Channel, StartPhase);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets Start Phase for PSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepskstate</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepskstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies PSK modulation to a channel (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>configurepsktype</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepsktype(obj, Channel, Type)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePSKType', session, Channel, Type);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects type for PSK modulation (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createpskdata</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpskdata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Data = [double(Data) 0];

status = calllib(libname, 'wx218x_CreatePSKData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads PSK data array in to the instrument (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createpskdataadv</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpskdataadv(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreatePSKDataAdv', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads PSK data array in to the instrument (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>createpskuserdata</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createpskuserdata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreatePSKUserData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads PSK user data array in to the instrument (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>loadpskdatafile</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadpskdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadPSKDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified PSK data file (not for WX218x models).</Description>
            </Method>
            <Method>
               <Name>loadpskuserdatafile</Name>
               <Location>instrumentspecificpsk</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadpskuserdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadPSKUserDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified PSK User data file (not for WX218x models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificqam</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificQAM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Baud</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150177);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150177 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the baud of which the symbols stream in the (n)QAM data table."</Description>
            </Property>
            <Property>
               <Name>Carrier_Enabled</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150180);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150180, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the carrier output on and off."</Description>
            </Property>
            <Property>
               <Name>Group_Type</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150178);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150178 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects between the various (n)QAM modulation schemes."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configureqambaud</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureqambaud(obj, Channel, Baud)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureQAMBaud', session, Channel, Baud);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the baud of which the symbols stream in the (n)QAM data table (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>configureqamcarrierstate</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureqamcarrierstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureQAMCarrierState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the carrier output on and off (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>configureqammarker</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureqammarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureQAMMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs where on the data stream the instrument will generate a pulse, designated as QAM marker, or index point (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>configureqamstate</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureqamstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureQAMState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures whether the function generator applies QAM modulation to a channel (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>configureqamtype</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureqamtype(obj, Channel, Type)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureQAMType', session, Channel, Type);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Selects between the various (n)QAM modulation schemes (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>createqamdata</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createqamdata(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Data = [double(Data) 0];

status = calllib(libname, 'wx218x_CreateQAMData', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads QAM data array in to the instrument (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>createqamdataadv</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createqamdataadv(obj, Channel, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateQAMDataAdv', session, Channel, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads QAM data array in to the instrument (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>createqamuserdata</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createqamuserdata(obj, Channel, DataIBufferSize, DataI, DataQBufferSize, DataQ)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_CreateQAMUserData', session, Channel, DataIBufferSize, DataI, DataQBufferSize, DataQ);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the pre-assigned symbols for USER QAM modulation type (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>loadqamdatafile</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadqamdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadQAMDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified QAM data file (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
            <Method>
               <Name>loadqamuserdatafile</Name>
               <Location>instrumentspecificqam</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadqamuserdatafile(obj, Channel, FileNameBufferSize, FileName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
FileName = [double(FileName) 0];

status = calllib(libname, 'wx218x_LoadQAMUserDataFile', session, Channel, FileNameBufferSize, FileName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method loads the data from the specified QAM User data file (not for WX218x models, only for 2 Ch,4Ch models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificstandardwaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificStandardWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Dc_Level</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150019);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150019 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the DC offset parameter in units of volts."</Description>
            </Property>
            <Property>
               <Name>Exp_Exponent</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150022);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150022 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the exponent parameter."</Description>
            </Property>
            <Property>
               <Name>Gauss_Exponent</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150024);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150024 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the exponent for the standard Gaussian pulse waveform."</Description>
            </Property>
            <Property>
               <Name>Hv_Amplitude</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150120);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150120 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the HV amplitude of the standard waveform."</Description>
            </Property>
            <Property>
               <Name>Power</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150025);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150025 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the output power."</Description>
            </Property>
            <Property>
               <Name>Ramp_Delay</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150026);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150026 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the ramp delay parameter in units of percent."</Description>
            </Property>
            <Property>
               <Name>Ramp_Fall_Time</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150027);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150027 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the ramp fall time parameter in units of percent."</Description>
            </Property>
            <Property>
               <Name>Ramp_Rise_Time</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150028);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150028 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the ramp rise time parameter in units of percent."</Description>
            </Property>
            <Property>
               <Name>SincN_Cycle</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150029);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150029 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the number of cycles of the standard SINC pulse waveform."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configure</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configure(obj, Channel, Waveform, Amplitude, DCOffset, Frequency, StartPhase)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_Configure', session, Channel, Waveform, Amplitude, DCOffset, Frequency, StartPhase);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the parameters of the function generator that affect standard waveform generation.</Description>
            </Method>
            <Method>
               <Name>configureamplitudeallch</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureamplitudeallch(obj, Amplitude)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureAmplitudeAllCh', session, Amplitude);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the amplitude of the standard waveform for all channels (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configuredclevel</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredclevel(obj, Channel, DcLevel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDCLevel', session, Channel, DcLevel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the DC offset parameter in units of volts.</Description>
            </Method>
            <Method>
               <Name>configuredutycycle</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuredutycycle(obj, Channel, DutyCycle)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureDutyCycle', session, Channel, DutyCycle);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the duty cycle of the standard square waveform in units of percent.</Description>
            </Method>
            <Method>
               <Name>configureexponenent</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureexponenent(obj, Channel, Exponent)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureExponenent', session, Channel, Exponent);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the exponent parameter.</Description>
            </Method>
            <Method>
               <Name>configuregauss</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuregauss(obj, Channel, Gauss)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureGauss', session, Channel, Gauss);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the exponent for the standard Gaussian pulse waveform.</Description>
            </Method>
            <Method>
               <Name>configurehvamplallch</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurehvamplallch(obj, HVAmplitude)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureHVAmplAllCh', session, HVAmplitude);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the HV amplitude of the standard waveform for all channels (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configurehvamplitude</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurehvamplitude(obj, Channel, HvAmplitude)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureHvAmplitude', session, Channel, HvAmplitude);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the HV amplitude of the standard waveform.</Description>
            </Method>
            <Method>
               <Name>configureoffsetallch</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureoffsetallch(obj, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureOffsetAllCh', session, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set dc offset of the output waveform for all channels (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configurepower</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurepower(obj, Channel, Power)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigurePower', session, Channel, Power);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to the output power (not for 4Ch. models,WS835x).</Description>
            </Method>
            <Method>
               <Name>configurerampwaveform</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerampwaveform(obj, Channel, Delay, RiseTime, FallTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureRampWaveform', session, Channel, Delay, RiseTime, FallTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the parameters of the function generator for the  ramp waveform.</Description>
            </Method>
            <Method>
               <Name>configuresincncycles</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresincncycles(obj, Channel, Cycles)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSincNCycles', session, Channel, Cycles);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set number of cycles of the standard SINC pulse waveform.</Description>
            </Method>
            <Method>
               <Name>setamplitudemax</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setamplitudemax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetAmplitudeMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the maximum amplitude value.</Description>
            </Method>
            <Method>
               <Name>setamplitudemin</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setamplitudemin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetAmplitudeMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the minimum amplitude value.</Description>
            </Method>
            <Method>
               <Name>setdcoffsetmax</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdcoffsetmax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDCOffsetMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the maximum DC offset value.</Description>
            </Method>
            <Method>
               <Name>setdcoffsetmin</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setdcoffsetmin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetDCOffsetMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the minimum DC offset value.</Description>
            </Method>
            <Method>
               <Name>setfrequencymax</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setfrequencymax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetFrequencyMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the maximum frequency value.</Description>
            </Method>
            <Method>
               <Name>setfrequencymin</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setfrequencymin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetFrequencyMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the minimum frequency value.</Description>
            </Method>
            <Method>
               <Name>setpowermax</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setpowermax(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetPowerMax', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the maximum power value (not for 4Ch. models,WS835x).</Description>
            </Method>
            <Method>
               <Name>setpowermin</Name>
               <Location>instrumentspecificstandardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setpowermin(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetPowerMin', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sets the minimum power value (not for 4Ch. models,WS835x).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificstatestorage</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificStateStorage1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cell_Recall</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150083);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150083 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects an active memory cell number. Consequent recall commands will affect this cell only."</Description>
            </Property>
            <Property>
               <Name>Cell_Store</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150084);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150084 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects an active memory cell number. Consequent store commands will affect this cell only."</Description>
            </Property>
            <Property>
               <Name>Configuration_Recall</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150118);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>3.0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"Use this property to query what you have store in the active memory cell."</Description>
            </Property>
            <Property>
               <Name>Configuration_Store</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150085);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150085 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to select what you intend to store in the active memory cell."</Description>
            </Property>
            <Property>
               <Name>Recall_Enabled</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150199);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150199, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables or Disables system recall."</Description>
            </Property>
            <Property>
               <Name>Store_Enabled</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150198);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150198, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables or Disables system store."</Description>
            </Property>
            <Property>
               <Name>Target_Recall</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150086);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150086 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to select the source of your recall operation."</Description>
            </Property>
            <Property>
               <Name>Target_Store</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150087);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150087 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to select the source of your store operation."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>stagestorageclear</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function stagestorageclear(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_StageStorageClear', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method clear all cells.</Description>
            </Method>
            <Method>
               <Name>statestorageload</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statestorageload(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_StateStorageLoad', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to select update the front panel and arbitrary memory with the information stored in the active memory cell.</Description>
            </Method>
            <Method>
               <Name>statestoragerecall</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statestoragerecall(obj, Cell, Target)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_StateStorageRecall', session, Cell, Target);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures parameters for recall operation.</Description>
            </Method>
            <Method>
               <Name>statestoragesave</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statestoragesave(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_StateStorageSave', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to select update the active memory cell with the front panel settings, waveform or both.</Description>
            </Method>
            <Method>
               <Name>statestoragestore</Name>
               <Location>instrumentspecificstatestorage</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statestoragestore(obj, Cell, Configuration, Target)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_StateStorageStore', session, Cell, Configuration, Target);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures parameters for store operation.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificsweep</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Direction</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150111);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150111 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property specifies if the instrument output will sweep from start-to-stop (UP) or from stop-to-start (DOWN) frequencies."</Description>
            </Property>
            <Property>
               <Name>Frequency_Start</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150113);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150113 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the sweep start frequency in units of Hz."</Description>
            </Property>
            <Property>
               <Name>Frequency_Stop</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150114);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150114 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the sweep stop frequency in units of Hz."</Description>
            </Property>
            <Property>
               <Name>Marker</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150115);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150115 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the marker frequency position in units of Hz."</Description>
            </Property>
            <Property>
               <Name>Spacing</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150116);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150116 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property specifies the sweep step type. Two options are available: logarithmic or linear."</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150117);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150117 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the sweep time in units of seconds."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuresweepdirection</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepdirection(obj, Channel, Direction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepDirection', session, Channel, Direction);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method specifies if the instrument output will sweep from start-to-stop (UP) or from stop-to-start (DOWN) frequencies.</Description>
            </Method>
            <Method>
               <Name>configuresweepfreqstart</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepfreqstart(obj, Channel, FreqStart)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepFreqStart', session, Channel, FreqStart);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the sweep start frequency in units of Hz.</Description>
            </Method>
            <Method>
               <Name>configuresweepfreqstop</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepfreqstop(obj, Channel, FreqStop)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepFreqStop', session, Channel, FreqStop);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the sweep stop frequency in units of Hz.</Description>
            </Method>
            <Method>
               <Name>configuresweepmarker</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepmarker(obj, Channel, Marker)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepMarker', session, Channel, Marker);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the marker frequency position in units of Hz.</Description>
            </Method>
            <Method>
               <Name>configuresweepspacing</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepspacing(obj, Channel, Spacing)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepSpacing', session, Channel, Spacing);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method specifies the sweep step type. Two options are available: logarithmic or linear.</Description>
            </Method>
            <Method>
               <Name>configuresweepstate</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweepstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method configures the function generator to apply frequency sweep to the output signal.</Description>
            </Method>
            <Method>
               <Name>configuresweeptime</Name>
               <Location>instrumentspecificsweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresweeptime(obj, Channel, Time)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSweepTime', session, Channel, Time);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the sweep time in units of seconds.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecifictrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Continuous_Mode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150065);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150065 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the state of the enable mode."</Description>
            </Property>
            <Property>
               <Name>Continuous_Source</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150066);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150066 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the source of the enable signal."</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150067);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150067 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the trigger delay setting."</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150070);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150070 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the source of the trigger event that will stimulate the instrument to generate waveforms."</Description>
            </Property>
            <Property>
               <Name>Timer_Delay</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150071);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150071 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the internal delayed trigger generator period in units of waveform points. Program the value using integers divisible by 8."</Description>
            </Property>
            <Property>
               <Name>Timer_Mode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150072);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150072 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the mode that the internal trigger generator will operate."</Description>
            </Property>
            <Property>
               <Name>Timer_Time</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150073);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150073 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the internal timed trigger generator period in units of seconds."</Description>
            </Property>
            <Property>
               <Name>Trigger_Impedance</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150208);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150208 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to define or query the trigger impedance."</Description>
            </Property>
            <Property>
               <Name>Trigger_Mode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150074);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150074 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to define or query the trigger mode."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configure2</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configure2(obj, Channel, Level)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_Configure2', session, Channel, Level);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to program the threshold level for the trigger input signals.</Description>
            </Method>
            <Method>
               <Name>configureburstcount2</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureburstcount2(obj, Channel, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureBurstCount2', session, Channel, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the burst counter setting.</Description>
            </Method>
            <Method>
               <Name>configuretrigcontmode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigcontmode(obj, Channel, ContMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigContMode', session, Channel, ContMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the state of the enable mode.</Description>
            </Method>
            <Method>
               <Name>configuretrigcontsource</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigcontsource(obj, Channel, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigContSource', session, Channel, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the source of the enable signal.</Description>
            </Method>
            <Method>
               <Name>configuretriggerdelay</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerdelay(obj, Channel, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTriggerDelay', session, Channel, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the trigger delay setting.</Description>
            </Method>
            <Method>
               <Name>configuretriggerimpedance</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerimpedance(obj, TriggerImpedance)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureTriggerImpedance', session, TriggerImpedance);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to configure Trigger Impedance (only for WX218xC,WX128xC models).</Description>
            </Method>
            <Method>
               <Name>configuretriggermode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggermode(obj, Channel, Mode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTriggerMode', session, Channel, Mode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define the trigger mode.</Description>
            </Method>
            <Method>
               <Name>configuretriggertimerdelay</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggertimerdelay(obj, Channel, TimerDelay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTriggerTimerDelay', session, Channel, TimerDelay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the internal delayed trigger generator period in units of waveform points. Program the value using integers divisible by 8.</Description>
            </Method>
            <Method>
               <Name>configuretriggertimertime</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggertimertime(obj, Channel, TimerTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTriggerTimerTime', session, Channel, TimerTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the internal timed trigger generator period in units of seconds.</Description>
            </Method>
            <Method>
               <Name>configuretrigslope</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigslope(obj, Channel, Slope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigSlope', session, Channel, Slope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define the edge that will affect the trigger input.</Description>
            </Method>
            <Method>
               <Name>configuretrigsource</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigsource(obj, Channel, Source)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigSource', session, Channel, Source);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the source of the trigger event that will stimulate the instrument to generate waveforms.</Description>
            </Method>
            <Method>
               <Name>configuretrigtimermode</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigtimermode(obj, Channel, TimerMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigTimerMode', session, Channel, TimerMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define  the trigger mode.</Description>
            </Method>
            <Method>
               <Name>sendsoftwaretrigger2</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendsoftwaretrigger2(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_SendSoftwareTrigger2', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method sends a command to trigger the function generator.</Description>
            </Method>
            <Method>
               <Name>settrigecllevel</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function settrigecllevel(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetTrigECLLevel', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the trigger input to accept ecl (negative) signals. The threshold level is automatically set to -1.3 V.</Description>
            </Method>
            <Method>
               <Name>settrigttllevel</Name>
               <Location>instrumentspecifictrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function settrigttllevel(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetTrigTTLLevel', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the trigegr input to accept ttl signals. The threshold level is automatically set to 1.6 V.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecifictriggerarm</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificTriggerARM1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Level</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150075);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150075 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"This property programs the threshold level for the event input signals."</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150076);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150076 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to define the edge that will affect the event input."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuretrigarmlevel</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigarmlevel(obj, Channel, Level)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigARMLevel', session, Channel, Level);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method programs the threshold level for the event input signals.</Description>
            </Method>
            <Method>
               <Name>configuretrigarmslope</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigarmslope(obj, Channel, Slope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureTrigARMSlope', session, Channel, Slope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define the edge that will affect the event input.</Description>
            </Method>
            <Method>
               <Name>setarmecllevel</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setarmecllevel(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetArmECLLevel', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the event input to accept ecl (negative) signals.</Description>
            </Method>
            <Method>
               <Name>setarmttllevel</Name>
               <Location>instrumentspecifictriggerarm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setarmttllevel(obj, Channel)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_SetArmTtlLevel', session, Channel);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the event input to accept ttl signals.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecifictriggersmarttrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificTriggerSmartTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Hi_Pass_Enabled</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150077);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150077, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the status of the high pass filter."</Description>
            </Property>
            <Property>
               <Name>Hi_Pass_Width</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150078);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150078 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the high pass pulse width value in units of second."</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150079);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150079 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the trigger holdoff period in units of second."</Description>
            </Property>
            <Property>
               <Name>Holdoff_Enabled</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150080);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150080, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the status of the holdoff filter."</Description>
            </Property>
            <Property>
               <Name>Low_Pass_Enabled</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150081);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150081, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to set or query the status of the low pass filter."</Description>
            </Property>
            <Property>
               <Name>Low_Pass_Width</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150082);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150082 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the low pass pulse width value in units of second."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuresmarttrighipassenabled</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttrighipassenabled(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigHiPassEnabled', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the status of the high pass filter.</Description>
            </Method>
            <Method>
               <Name>configuresmarttrighipasswidth</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttrighipasswidth(obj, Channel, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigHiPassWidth', session, Channel, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the high pass pulse width value in units of second.</Description>
            </Method>
            <Method>
               <Name>configuresmarttrigholdoff</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttrigholdoff(obj, Channel, Holdoff)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigHoldoff', session, Channel, Holdoff);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the trigger holdoff period in units of second.</Description>
            </Method>
            <Method>
               <Name>configuresmarttrigholdoffstate</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttrigholdoffstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigHoldoffState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the status of the holdoff filter.</Description>
            </Method>
            <Method>
               <Name>configuresmarttriglowpassstate</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttriglowpassstate(obj, Channel, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigLowPassState', session, Channel, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to set the status of the low pass filter.</Description>
            </Method>
            <Method>
               <Name>configuresmarttriglowpasswidth</Name>
               <Location>instrumentspecifictriggersmarttrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuresmarttriglowpasswidth(obj, Channel, Width)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'wx218x_ConfigureSmartTrigLowPassWidth', session, Channel, Width);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Programs the low pass pulse width value in units of second.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>instrumentspecificxinstrument</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificXInstrument1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150088);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150088, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets or queries the state of the synchronized instruments."</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150089);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150089 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to define master and slave instruments. This command affects the system only when two instruments are hooked to a LAN network, synchronization cable is attached to the rear panel of both instruments and are intended to operate in synchronized mode."</Description>
            </Property>
            <Property>
               <Name>Mode_Adv</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150201);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150201 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"Use this property to define master,slave and MSlave instruments. This command affects the system only when two instruments are hooked to a LAN network, synchronization cable is attached to the rear panel of both instruments and are intended to operate in synchronized mode."</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150090);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150090 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"When X-Instrument state is ON, this property sets or queries the offset between the start phase of the master instrument and the start phase of the slave instrument."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configurexinstrumentenabled</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurexinstrumentenabled(obj, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureXInstrumentEnabled', session, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configure the state of the synchronized instruments.</Description>
            </Method>
            <Method>
               <Name>configurexinstrumentmode</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurexinstrumentmode(obj, Mode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureXInstrumentMode', session, Mode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define master and slave instruments. This command affects the system only when two instruments are hooked to a LAN network, synchronization cable is attached to the rear panel of both instruments and are intended to operate in synchronized mode (not for 4Ch. models,WS835x).</Description>
            </Method>
            <Method>
               <Name>configurexinstrumentmodeadv</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurexinstrumentmodeadv(obj, ModeAdv)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureXInstrumentModeAdv', session, ModeAdv);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Use this method to define master,slave and MSlave instruments. This command affects the system only when two instruments are hooked to a LAN network, synchronization cable is attached to the rear panel of both instruments and are intended to operate in synchronized mode (only for 4Ch. models).</Description>
            </Method>
            <Method>
               <Name>configurexinstrumentoffset</Name>
               <Location>instrumentspecificxinstrument</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurexinstrumentoffset(obj, Offset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ConfigureXInstrumentOffset', session, Offset);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>When X-Instrument state is ON, this property sets or queries the offset between the start phase of the master instrument and the start phase of the slave instrument (not for WS835x models).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>output</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Output1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Operation_Mode</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250005 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The mode that determines how the function generator produces waveforms. This attribute determines which extension group's functions and attributes are used to configure the waveform the function generator produces."</Description>
            </Property>
            <Property>
               <Name>Output_Count</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>"The number of output channels supported by the instrument."</Description>
            </Property>
            <Property>
               <Name>Output_Enabled</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"If true, the signal the function generator produces appears at the output connector."</Description>
            </Property>
            <Property>
               <Name>Output_Impedance</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250004 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The impedance of the output channel.  The units are Ohms."</Description>
            </Property>
            <Property>
               <Name>Output_Mode</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250001 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The mode that determines how the function generator produces waveforms. This attribute determines which extension group's functions and attributes are used to configure the waveform the function generator produces."</Description>
            </Property>
            <Property>
               <Name>Reference_Clock_Source</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250002 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>101.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>101.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The source of the reference clock. The function generator derives frequencies and sample rates that it uses to generate waveforms from the reference clock."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>standardwaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="StandardWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250102 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The amplitude of the standard waveform output by the function generator. When the Waveform attribute is set to Waveform DC, this attribute does not affect signal output.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>DC_Offset</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250103 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The DC offset of the standard waveform output by the function generator. If the Waveform attribute is set to Waveform DC, this attribute specifies the DC level the function generator produces.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>Duty_Cycle_High</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250106 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The duty cycle for a square waveform. This attribute affects function generator behavior only when the Waveform attribute is set to Waveform Square.  The value is expressed as a percentage."</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250104);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250104 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The frequency of the standard waveform output by the function generator. When the Waveform attribute is set to Waveform DC, this attribute does not affect signal output.  The units are Hertz."</Description>
            </Property>
            <Property>
               <Name>Start_Phase</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250105 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The start phase of the standard waveform output by the function generator. When the Waveform attribute is set to Waveform DC, this attribute does not affect signal output.  The units are degrees."</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>standardwaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250101);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250101 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>6.0</Value>
                     <Value>3.0</Value>
                     <Value>5.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>6.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The standard waveform output by the function generator."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Burst_Count</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250350);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250350 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The number of waveform cycles that the function generator produces after it receives a trigger."</Description>
            </Property>
            <Property>
               <Name>Internal_Trigger_Rate</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250310);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250310 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The rate at which the function generator's internal trigger source produces a trigger, in triggers per second."</Description>
            </Property>
            <Property>
               <Name>Trigger_Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250302);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250302 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>147.0</Value>
                     <Value>146.0</Value>
                     <Value>145.0</Value>
                     <Value>144.0</Value>
                     <Value>143.0</Value>
                     <Value>142.0</Value>
                     <Value>141.0</Value>
                     <Value>118.0</Value>
                     <Value>117.0</Value>
                     <Value>116.0</Value>
                     <Value>115.0</Value>
                     <Value>114.0</Value>
                     <Value>113.0</Value>
                     <Value>112.0</Value>
                     <Value>111.0</Value>
                     <Value>2.0</Value>
                     <Value>131.0</Value>
                     <Value>120.0</Value>
                     <Value>119.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>3.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>"The trigger source. After the function generator receives a trigger from this source, it produces a signal."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearerror</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearerror(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearError', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the error code and error description for the current execution thread and for the IVI session. If the user specifies a valid IVI session for the Vi parameter, this function clears the error information for the session. If the user passes VI_NULL for the Vi parameter, this function clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error.</Description>
            </Method>
            <Method>
               <Name>clearinterchangewarnings</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearinterchangewarnings(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ClearInterchangeWarnings', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>disable</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disable(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_Disable', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>errormessage</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorMessage] = errormessage(obj, ErrorCode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_error_message', session, ErrorCode, ErrorMessage);

ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Translates the error return value from an IVI driver function to a user-readable string. The user should pass a buffer with at least 256 bytes for the ErrorMessage parameter.</Description>
            </Method>
            <Method>
               <Name>errorquery</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = errorquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_error_query', session, ErrorCode, ErrorMessage);

ErrorCode = double(ErrorCode.Value);
ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>getchannelname</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_GetChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the physical name defined by the specific driver for the output channel that corresponds to the 1-based index that the user specifies. If the value that the user passes for the ChannelIndex parameter is less than one or greater than the value of the Channel Count, the function returns an empty string in the ChannelName parameter and returns an error.</Description>
            </Method>
            <Method>
               <Name>geterror</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorDescription] = geterror(obj, ErrorDescriptionBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorDescription = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_GetError', session, ErrorCode, ErrorDescriptionBufferSize, ErrorDescription);

ErrorCode = double(ErrorCode.Value);
ErrorDescription = strtrim(char(ErrorDescription.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function retrieves and then clears the IVI error information for the session or the current execution thread. If the user specifies a valid IVI session for the Vi parameter, Get Error retrieves and then clears the error information for the session. If the user passes VI_NULL for the Vi parameter, Get Error retrieves and then clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error. Normally, the error information describes the first error that occurred since the user last called the Get Error or Clear Error function.</Description>
            </Method>
            <Method>
               <Name>getnextcoercionrecord</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = getnextcoercionrecord(obj, CoercionRecordBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CoercionRecord = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_GetNextCoercionRecord', session, CoercionRecordBufferSize, CoercionRecord);

CoercionRecord = strtrim(char(CoercionRecord.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>getnextinterchangewarning</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = getnextinterchangewarning(obj, InterchangeWarningBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InterchangeWarning = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_GetNextInterchangeWarning', session, InterchangeWarningBufferSize, InterchangeWarning);

InterchangeWarning = strtrim(char(InterchangeWarning.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>invalidateallattributes</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function invalidateallattributes(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_InvalidateAllAttributes', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>locksession</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = locksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'wx218x_LockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_reset', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>resetinterchangecheck</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetinterchangecheck(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ResetInterchangeCheck', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
            <Method>
               <Name>resetwithdefaults</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetwithdefaults(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'wx218x_ResetWithDefaults', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>revisionquery</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DriverRev, InstrRev] = revisionquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DriverRev = libpointer('int8Ptr', repmat(10, 1, 512));
InstrRev = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_revision_query', session, DriverRev, InstrRev);

DriverRev = strtrim(char(DriverRev.Value));
InstrRev = strtrim(char(InstrRev.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Retrieves revision information from the instrument.</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = selftest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TestResult = libpointer('int16Ptr', 0);
TestMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'wx218x_self_test', session, TestResult, TestMessage);

TestResult = double(TestResult.Value);
TestMessage = strtrim(char(TestMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>unlocksession</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = unlocksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'wx218x_UnlockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'wx218x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>